// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: sdn/telemetry/telemetry.proto

package telemetry

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TelemetryServiceClient is the client API for TelemetryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelemetryServiceClient interface {
	ConfigureTelemetry(ctx context.Context, in *ConfigureTelemetryRequest, opts ...grpc.CallOption) (*ConfigureTelemetryResponse, error)
	DisableTelemetry(ctx context.Context, in *DisableTelemetryRequest, opts ...grpc.CallOption) (*DisableTelemetryResponse, error)
	SubscribeSourceCapabilities(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (TelemetryService_SubscribeSourceCapabilitiesClient, error)
}

type telemetryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTelemetryServiceClient(cc grpc.ClientConnInterface) TelemetryServiceClient {
	return &telemetryServiceClient{cc}
}

func (c *telemetryServiceClient) ConfigureTelemetry(ctx context.Context, in *ConfigureTelemetryRequest, opts ...grpc.CallOption) (*ConfigureTelemetryResponse, error) {
	out := new(ConfigureTelemetryResponse)
	err := c.cc.Invoke(ctx, "/telemetry.TelemetryService/ConfigureTelemetry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) DisableTelemetry(ctx context.Context, in *DisableTelemetryRequest, opts ...grpc.CallOption) (*DisableTelemetryResponse, error) {
	out := new(DisableTelemetryResponse)
	err := c.cc.Invoke(ctx, "/telemetry.TelemetryService/DisableTelemetry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) SubscribeSourceCapabilities(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (TelemetryService_SubscribeSourceCapabilitiesClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[0], "/telemetry.TelemetryService/SubscribeSourceCapabilities", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceSubscribeSourceCapabilitiesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TelemetryService_SubscribeSourceCapabilitiesClient interface {
	Recv() (*SourceCapabilityUpdate, error)
	grpc.ClientStream
}

type telemetryServiceSubscribeSourceCapabilitiesClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceSubscribeSourceCapabilitiesClient) Recv() (*SourceCapabilityUpdate, error) {
	m := new(SourceCapabilityUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TelemetryServiceServer is the server API for TelemetryService service.
// All implementations must embed UnimplementedTelemetryServiceServer
// for forward compatibility
type TelemetryServiceServer interface {
	ConfigureTelemetry(context.Context, *ConfigureTelemetryRequest) (*ConfigureTelemetryResponse, error)
	DisableTelemetry(context.Context, *DisableTelemetryRequest) (*DisableTelemetryResponse, error)
	SubscribeSourceCapabilities(*empty.Empty, TelemetryService_SubscribeSourceCapabilitiesServer) error
	mustEmbedUnimplementedTelemetryServiceServer()
}

// UnimplementedTelemetryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTelemetryServiceServer struct {
}

func (UnimplementedTelemetryServiceServer) ConfigureTelemetry(context.Context, *ConfigureTelemetryRequest) (*ConfigureTelemetryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureTelemetry not implemented")
}
func (UnimplementedTelemetryServiceServer) DisableTelemetry(context.Context, *DisableTelemetryRequest) (*DisableTelemetryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableTelemetry not implemented")
}
func (UnimplementedTelemetryServiceServer) SubscribeSourceCapabilities(*empty.Empty, TelemetryService_SubscribeSourceCapabilitiesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeSourceCapabilities not implemented")
}
func (UnimplementedTelemetryServiceServer) mustEmbedUnimplementedTelemetryServiceServer() {}

// UnsafeTelemetryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelemetryServiceServer will
// result in compilation errors.
type UnsafeTelemetryServiceServer interface {
	mustEmbedUnimplementedTelemetryServiceServer()
}

func RegisterTelemetryServiceServer(s grpc.ServiceRegistrar, srv TelemetryServiceServer) {
	s.RegisterService(&TelemetryService_ServiceDesc, srv)
}

func _TelemetryService_ConfigureTelemetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureTelemetryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).ConfigureTelemetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.TelemetryService/ConfigureTelemetry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).ConfigureTelemetry(ctx, req.(*ConfigureTelemetryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_DisableTelemetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableTelemetryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).DisableTelemetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.TelemetryService/DisableTelemetry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).DisableTelemetry(ctx, req.(*DisableTelemetryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_SubscribeSourceCapabilities_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemetryServiceServer).SubscribeSourceCapabilities(m, &telemetryServiceSubscribeSourceCapabilitiesServer{stream})
}

type TelemetryService_SubscribeSourceCapabilitiesServer interface {
	Send(*SourceCapabilityUpdate) error
	grpc.ServerStream
}

type telemetryServiceSubscribeSourceCapabilitiesServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceSubscribeSourceCapabilitiesServer) Send(m *SourceCapabilityUpdate) error {
	return x.ServerStream.SendMsg(m)
}

// TelemetryService_ServiceDesc is the grpc.ServiceDesc for TelemetryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TelemetryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "telemetry.TelemetryService",
	HandlerType: (*TelemetryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigureTelemetry",
			Handler:    _TelemetryService_ConfigureTelemetry_Handler,
		},
		{
			MethodName: "DisableTelemetry",
			Handler:    _TelemetryService_DisableTelemetry_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeSourceCapabilities",
			Handler:       _TelemetryService_SubscribeSourceCapabilities_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sdn/telemetry/telemetry.proto",
}
