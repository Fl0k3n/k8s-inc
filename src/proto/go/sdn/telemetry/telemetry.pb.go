// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: sdn/telemetry/telemetry.proto

package telemetry

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TelemetryState int32

const (
	TelemetryState_OK          TelemetryState = 0
	TelemetryState_IN_PROGRESS TelemetryState = 1
	TelemetryState_FAILED      TelemetryState = 2
)

// Enum value maps for TelemetryState.
var (
	TelemetryState_name = map[int32]string{
		0: "OK",
		1: "IN_PROGRESS",
		2: "FAILED",
	}
	TelemetryState_value = map[string]int32{
		"OK":          0,
		"IN_PROGRESS": 1,
		"FAILED":      2,
	}
)

func (x TelemetryState) Enum() *TelemetryState {
	p := new(TelemetryState)
	*p = x
	return p
}

func (x TelemetryState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TelemetryState) Descriptor() protoreflect.EnumDescriptor {
	return file_sdn_telemetry_telemetry_proto_enumTypes[0].Descriptor()
}

func (TelemetryState) Type() protoreflect.EnumType {
	return &file_sdn_telemetry_telemetry_proto_enumTypes[0]
}

func (x TelemetryState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TelemetryState.Descriptor instead.
func (TelemetryState) EnumDescriptor() ([]byte, []int) {
	return file_sdn_telemetry_telemetry_proto_rawDescGZIP(), []int{0}
}

type ConfigureTelemetryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntentId          string `protobuf:"bytes,1,opt,name=intentId,proto3" json:"intentId,omitempty"`
	CollectionId      string `protobuf:"bytes,2,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	CollectorNodeName string `protobuf:"bytes,3,opt,name=collectorNodeName,proto3" json:"collectorNodeName,omitempty"`
	CollectorPort     int32  `protobuf:"varint,4,opt,name=collectorPort,proto3" json:"collectorPort,omitempty"`
	// Types that are assignable to Sources:
	//
	//	*ConfigureTelemetryRequest_RawSources
	//	*ConfigureTelemetryRequest_TunneledSources
	Sources isConfigureTelemetryRequest_Sources `protobuf_oneof:"sources"`
	// Types that are assignable to Targets:
	//
	//	*ConfigureTelemetryRequest_RawTargets
	//	*ConfigureTelemetryRequest_TunneledTargets
	Targets isConfigureTelemetryRequest_Targets `protobuf_oneof:"targets"`
}

func (x *ConfigureTelemetryRequest) Reset() {
	*x = ConfigureTelemetryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdn_telemetry_telemetry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureTelemetryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureTelemetryRequest) ProtoMessage() {}

func (x *ConfigureTelemetryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdn_telemetry_telemetry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureTelemetryRequest.ProtoReflect.Descriptor instead.
func (*ConfigureTelemetryRequest) Descriptor() ([]byte, []int) {
	return file_sdn_telemetry_telemetry_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigureTelemetryRequest) GetIntentId() string {
	if x != nil {
		return x.IntentId
	}
	return ""
}

func (x *ConfigureTelemetryRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *ConfigureTelemetryRequest) GetCollectorNodeName() string {
	if x != nil {
		return x.CollectorNodeName
	}
	return ""
}

func (x *ConfigureTelemetryRequest) GetCollectorPort() int32 {
	if x != nil {
		return x.CollectorPort
	}
	return 0
}

func (m *ConfigureTelemetryRequest) GetSources() isConfigureTelemetryRequest_Sources {
	if m != nil {
		return m.Sources
	}
	return nil
}

func (x *ConfigureTelemetryRequest) GetRawSources() *RawTelemetryEntities {
	if x, ok := x.GetSources().(*ConfigureTelemetryRequest_RawSources); ok {
		return x.RawSources
	}
	return nil
}

func (x *ConfigureTelemetryRequest) GetTunneledSources() *TunneledTelemetryEntities {
	if x, ok := x.GetSources().(*ConfigureTelemetryRequest_TunneledSources); ok {
		return x.TunneledSources
	}
	return nil
}

func (m *ConfigureTelemetryRequest) GetTargets() isConfigureTelemetryRequest_Targets {
	if m != nil {
		return m.Targets
	}
	return nil
}

func (x *ConfigureTelemetryRequest) GetRawTargets() *RawTelemetryEntities {
	if x, ok := x.GetTargets().(*ConfigureTelemetryRequest_RawTargets); ok {
		return x.RawTargets
	}
	return nil
}

func (x *ConfigureTelemetryRequest) GetTunneledTargets() *TunneledTelemetryEntities {
	if x, ok := x.GetTargets().(*ConfigureTelemetryRequest_TunneledTargets); ok {
		return x.TunneledTargets
	}
	return nil
}

type isConfigureTelemetryRequest_Sources interface {
	isConfigureTelemetryRequest_Sources()
}

type ConfigureTelemetryRequest_RawSources struct {
	RawSources *RawTelemetryEntities `protobuf:"bytes,5,opt,name=rawSources,proto3,oneof"`
}

type ConfigureTelemetryRequest_TunneledSources struct {
	TunneledSources *TunneledTelemetryEntities `protobuf:"bytes,6,opt,name=tunneledSources,proto3,oneof"`
}

func (*ConfigureTelemetryRequest_RawSources) isConfigureTelemetryRequest_Sources() {}

func (*ConfigureTelemetryRequest_TunneledSources) isConfigureTelemetryRequest_Sources() {}

type isConfigureTelemetryRequest_Targets interface {
	isConfigureTelemetryRequest_Targets()
}

type ConfigureTelemetryRequest_RawTargets struct {
	RawTargets *RawTelemetryEntities `protobuf:"bytes,7,opt,name=rawTargets,proto3,oneof"`
}

type ConfigureTelemetryRequest_TunneledTargets struct {
	TunneledTargets *TunneledTelemetryEntities `protobuf:"bytes,8,opt,name=tunneledTargets,proto3,oneof"`
}

func (*ConfigureTelemetryRequest_RawTargets) isConfigureTelemetryRequest_Targets() {}

func (*ConfigureTelemetryRequest_TunneledTargets) isConfigureTelemetryRequest_Targets() {}

type TunneledTelemetryEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceNamesWithEntities map[string]*TunneledEntities `protobuf:"bytes,1,rep,name=deviceNamesWithEntities,proto3" json:"deviceNamesWithEntities,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TunneledTelemetryEntities) Reset() {
	*x = TunneledTelemetryEntities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdn_telemetry_telemetry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunneledTelemetryEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunneledTelemetryEntities) ProtoMessage() {}

func (x *TunneledTelemetryEntities) ProtoReflect() protoreflect.Message {
	mi := &file_sdn_telemetry_telemetry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunneledTelemetryEntities.ProtoReflect.Descriptor instead.
func (*TunneledTelemetryEntities) Descriptor() ([]byte, []int) {
	return file_sdn_telemetry_telemetry_proto_rawDescGZIP(), []int{1}
}

func (x *TunneledTelemetryEntities) GetDeviceNamesWithEntities() map[string]*TunneledEntities {
	if x != nil {
		return x.DeviceNamesWithEntities
	}
	return nil
}

type TunneledEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entities []*TunneledEntity `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *TunneledEntities) Reset() {
	*x = TunneledEntities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdn_telemetry_telemetry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunneledEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunneledEntities) ProtoMessage() {}

func (x *TunneledEntities) ProtoReflect() protoreflect.Message {
	mi := &file_sdn_telemetry_telemetry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunneledEntities.ProtoReflect.Descriptor instead.
func (*TunneledEntities) Descriptor() ([]byte, []int) {
	return file_sdn_telemetry_telemetry_proto_rawDescGZIP(), []int{2}
}

func (x *TunneledEntities) GetEntities() []*TunneledEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

type TunneledEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TunneledIp string `protobuf:"bytes,1,opt,name=tunneledIp,proto3" json:"tunneledIp,omitempty"`
	Port       *int32 `protobuf:"varint,2,opt,name=port,proto3,oneof" json:"port,omitempty"` // not present means any port
}

func (x *TunneledEntity) Reset() {
	*x = TunneledEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdn_telemetry_telemetry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunneledEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunneledEntity) ProtoMessage() {}

func (x *TunneledEntity) ProtoReflect() protoreflect.Message {
	mi := &file_sdn_telemetry_telemetry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunneledEntity.ProtoReflect.Descriptor instead.
func (*TunneledEntity) Descriptor() ([]byte, []int) {
	return file_sdn_telemetry_telemetry_proto_rawDescGZIP(), []int{3}
}

func (x *TunneledEntity) GetTunneledIp() string {
	if x != nil {
		return x.TunneledIp
	}
	return ""
}

func (x *TunneledEntity) GetPort() int32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

type RawTelemetryEntities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entities []*RawTelemetryEntity `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (x *RawTelemetryEntities) Reset() {
	*x = RawTelemetryEntities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdn_telemetry_telemetry_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawTelemetryEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawTelemetryEntities) ProtoMessage() {}

func (x *RawTelemetryEntities) ProtoReflect() protoreflect.Message {
	mi := &file_sdn_telemetry_telemetry_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawTelemetryEntities.ProtoReflect.Descriptor instead.
func (*RawTelemetryEntities) Descriptor() ([]byte, []int) {
	return file_sdn_telemetry_telemetry_proto_rawDescGZIP(), []int{4}
}

func (x *RawTelemetryEntities) GetEntities() []*RawTelemetryEntity {
	if x != nil {
		return x.Entities
	}
	return nil
}

type RawTelemetryEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceName string `protobuf:"bytes,1,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	Port       *int32 `protobuf:"varint,2,opt,name=port,proto3,oneof" json:"port,omitempty"` // not present means any port
}

func (x *RawTelemetryEntity) Reset() {
	*x = RawTelemetryEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdn_telemetry_telemetry_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawTelemetryEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawTelemetryEntity) ProtoMessage() {}

func (x *RawTelemetryEntity) ProtoReflect() protoreflect.Message {
	mi := &file_sdn_telemetry_telemetry_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawTelemetryEntity.ProtoReflect.Descriptor instead.
func (*RawTelemetryEntity) Descriptor() ([]byte, []int) {
	return file_sdn_telemetry_telemetry_proto_rawDescGZIP(), []int{5}
}

func (x *RawTelemetryEntity) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *RawTelemetryEntity) GetPort() int32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

type ConfigureTelemetryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelemetryState TelemetryState `protobuf:"varint,1,opt,name=telemetryState,proto3,enum=telemetry.TelemetryState" json:"telemetryState,omitempty"`
	Description    *string        `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
}

func (x *ConfigureTelemetryResponse) Reset() {
	*x = ConfigureTelemetryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdn_telemetry_telemetry_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureTelemetryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureTelemetryResponse) ProtoMessage() {}

func (x *ConfigureTelemetryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdn_telemetry_telemetry_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureTelemetryResponse.ProtoReflect.Descriptor instead.
func (*ConfigureTelemetryResponse) Descriptor() ([]byte, []int) {
	return file_sdn_telemetry_telemetry_proto_rawDescGZIP(), []int{6}
}

func (x *ConfigureTelemetryResponse) GetTelemetryState() TelemetryState {
	if x != nil {
		return x.TelemetryState
	}
	return TelemetryState_OK
}

func (x *ConfigureTelemetryResponse) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type DisableTelemetryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntentId string `protobuf:"bytes,1,opt,name=intentId,proto3" json:"intentId,omitempty"`
}

func (x *DisableTelemetryRequest) Reset() {
	*x = DisableTelemetryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdn_telemetry_telemetry_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableTelemetryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableTelemetryRequest) ProtoMessage() {}

func (x *DisableTelemetryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sdn_telemetry_telemetry_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableTelemetryRequest.ProtoReflect.Descriptor instead.
func (*DisableTelemetryRequest) Descriptor() ([]byte, []int) {
	return file_sdn_telemetry_telemetry_proto_rawDescGZIP(), []int{7}
}

func (x *DisableTelemetryRequest) GetIntentId() string {
	if x != nil {
		return x.IntentId
	}
	return ""
}

type DisableTelemetryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShouldRetryLater bool `protobuf:"varint,1,opt,name=shouldRetryLater,proto3" json:"shouldRetryLater,omitempty"`
}

func (x *DisableTelemetryResponse) Reset() {
	*x = DisableTelemetryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sdn_telemetry_telemetry_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableTelemetryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableTelemetryResponse) ProtoMessage() {}

func (x *DisableTelemetryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sdn_telemetry_telemetry_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableTelemetryResponse.ProtoReflect.Descriptor instead.
func (*DisableTelemetryResponse) Descriptor() ([]byte, []int) {
	return file_sdn_telemetry_telemetry_proto_rawDescGZIP(), []int{8}
}

func (x *DisableTelemetryResponse) GetShouldRetryLater() bool {
	if x != nil {
		return x.ShouldRetryLater
	}
	return false
}

var File_sdn_telemetry_telemetry_proto protoreflect.FileDescriptor

var file_sdn_telemetry_telemetry_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x64, 0x6e, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x09, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x22, 0xef, 0x03, 0x0a, 0x19, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x41, 0x0a, 0x0a,
	0x72, 0x61, 0x77, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x77,
	0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x61, 0x77, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12,
	0x50, 0x0a, 0x0f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x65, 0x64, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x0f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x41, 0x0a, 0x0a, 0x72, 0x61, 0x77, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2e, 0x52, 0x61, 0x77, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x48, 0x01, 0x52, 0x0a, 0x72, 0x61, 0x77, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x0f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x65, 0x64,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x65, 0x64, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x48, 0x01, 0x52, 0x0f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x65, 0x64, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x42, 0x09, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x22, 0x81, 0x02, 0x0a,
	0x19, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x65, 0x64, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x7b, 0x0a, 0x17, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x65, 0x64,
	0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x67, 0x0a, 0x1c, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x65, 0x64, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x49, 0x0a, 0x10, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x52, 0x0a, 0x0e, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x65, 0x64, 0x49, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x65, 0x64, 0x49, 0x70, 0x12, 0x17, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x22,
	0x51, 0x0a, 0x14, 0x52, 0x61, 0x77, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x77, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x22, 0x56, 0x0a, 0x12, 0x52, 0x61, 0x77, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x96, 0x01, 0x0a, 0x1a, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x17, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x18, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x52, 0x65, 0x74, 0x72, 0x79, 0x4c, 0x61, 0x74,
	0x65, 0x72, 0x2a, 0x35, 0x0a, 0x0e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x32, 0xd6, 0x01, 0x0a, 0x10, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x63,
	0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x12, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x22, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x46, 0x6c, 0x30, 0x6b, 0x33, 0x6e, 0x2f, 0x6b, 0x38, 0x73, 0x2d, 0x69, 0x6e, 0x63, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x64, 0x6e, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sdn_telemetry_telemetry_proto_rawDescOnce sync.Once
	file_sdn_telemetry_telemetry_proto_rawDescData = file_sdn_telemetry_telemetry_proto_rawDesc
)

func file_sdn_telemetry_telemetry_proto_rawDescGZIP() []byte {
	file_sdn_telemetry_telemetry_proto_rawDescOnce.Do(func() {
		file_sdn_telemetry_telemetry_proto_rawDescData = protoimpl.X.CompressGZIP(file_sdn_telemetry_telemetry_proto_rawDescData)
	})
	return file_sdn_telemetry_telemetry_proto_rawDescData
}

var file_sdn_telemetry_telemetry_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_sdn_telemetry_telemetry_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_sdn_telemetry_telemetry_proto_goTypes = []interface{}{
	(TelemetryState)(0),                // 0: telemetry.TelemetryState
	(*ConfigureTelemetryRequest)(nil),  // 1: telemetry.ConfigureTelemetryRequest
	(*TunneledTelemetryEntities)(nil),  // 2: telemetry.TunneledTelemetryEntities
	(*TunneledEntities)(nil),           // 3: telemetry.TunneledEntities
	(*TunneledEntity)(nil),             // 4: telemetry.TunneledEntity
	(*RawTelemetryEntities)(nil),       // 5: telemetry.RawTelemetryEntities
	(*RawTelemetryEntity)(nil),         // 6: telemetry.RawTelemetryEntity
	(*ConfigureTelemetryResponse)(nil), // 7: telemetry.ConfigureTelemetryResponse
	(*DisableTelemetryRequest)(nil),    // 8: telemetry.DisableTelemetryRequest
	(*DisableTelemetryResponse)(nil),   // 9: telemetry.DisableTelemetryResponse
	nil,                                // 10: telemetry.TunneledTelemetryEntities.DeviceNamesWithEntitiesEntry
}
var file_sdn_telemetry_telemetry_proto_depIdxs = []int32{
	5,  // 0: telemetry.ConfigureTelemetryRequest.rawSources:type_name -> telemetry.RawTelemetryEntities
	2,  // 1: telemetry.ConfigureTelemetryRequest.tunneledSources:type_name -> telemetry.TunneledTelemetryEntities
	5,  // 2: telemetry.ConfigureTelemetryRequest.rawTargets:type_name -> telemetry.RawTelemetryEntities
	2,  // 3: telemetry.ConfigureTelemetryRequest.tunneledTargets:type_name -> telemetry.TunneledTelemetryEntities
	10, // 4: telemetry.TunneledTelemetryEntities.deviceNamesWithEntities:type_name -> telemetry.TunneledTelemetryEntities.DeviceNamesWithEntitiesEntry
	4,  // 5: telemetry.TunneledEntities.entities:type_name -> telemetry.TunneledEntity
	6,  // 6: telemetry.RawTelemetryEntities.entities:type_name -> telemetry.RawTelemetryEntity
	0,  // 7: telemetry.ConfigureTelemetryResponse.telemetryState:type_name -> telemetry.TelemetryState
	3,  // 8: telemetry.TunneledTelemetryEntities.DeviceNamesWithEntitiesEntry.value:type_name -> telemetry.TunneledEntities
	1,  // 9: telemetry.TelemetryService.ConfigureTelemetry:input_type -> telemetry.ConfigureTelemetryRequest
	8,  // 10: telemetry.TelemetryService.DisableTelemetry:input_type -> telemetry.DisableTelemetryRequest
	7,  // 11: telemetry.TelemetryService.ConfigureTelemetry:output_type -> telemetry.ConfigureTelemetryResponse
	9,  // 12: telemetry.TelemetryService.DisableTelemetry:output_type -> telemetry.DisableTelemetryResponse
	11, // [11:13] is the sub-list for method output_type
	9,  // [9:11] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_sdn_telemetry_telemetry_proto_init() }
func file_sdn_telemetry_telemetry_proto_init() {
	if File_sdn_telemetry_telemetry_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sdn_telemetry_telemetry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigureTelemetryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdn_telemetry_telemetry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunneledTelemetryEntities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdn_telemetry_telemetry_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunneledEntities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdn_telemetry_telemetry_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunneledEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdn_telemetry_telemetry_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawTelemetryEntities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdn_telemetry_telemetry_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawTelemetryEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdn_telemetry_telemetry_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigureTelemetryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdn_telemetry_telemetry_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableTelemetryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sdn_telemetry_telemetry_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableTelemetryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sdn_telemetry_telemetry_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ConfigureTelemetryRequest_RawSources)(nil),
		(*ConfigureTelemetryRequest_TunneledSources)(nil),
		(*ConfigureTelemetryRequest_RawTargets)(nil),
		(*ConfigureTelemetryRequest_TunneledTargets)(nil),
	}
	file_sdn_telemetry_telemetry_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_sdn_telemetry_telemetry_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_sdn_telemetry_telemetry_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sdn_telemetry_telemetry_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sdn_telemetry_telemetry_proto_goTypes,
		DependencyIndexes: file_sdn_telemetry_telemetry_proto_depIdxs,
		EnumInfos:         file_sdn_telemetry_telemetry_proto_enumTypes,
		MessageInfos:      file_sdn_telemetry_telemetry_proto_msgTypes,
	}.Build()
	File_sdn_telemetry_telemetry_proto = out.File
	file_sdn_telemetry_telemetry_proto_rawDesc = nil
	file_sdn_telemetry_telemetry_proto_goTypes = nil
	file_sdn_telemetry_telemetry_proto_depIdxs = nil
}
