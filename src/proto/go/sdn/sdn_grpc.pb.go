// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: sdn/sdn.proto

package sdn

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SdnFrontendClient is the client API for SdnFrontend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SdnFrontendClient interface {
	GetTopology(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TopologyResponse, error)
	GetSwitchDetails(ctx context.Context, in *SwitchNames, opts ...grpc.CallOption) (*SwitchDetailsResponse, error)
}

type sdnFrontendClient struct {
	cc grpc.ClientConnInterface
}

func NewSdnFrontendClient(cc grpc.ClientConnInterface) SdnFrontendClient {
	return &sdnFrontendClient{cc}
}

func (c *sdnFrontendClient) GetTopology(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TopologyResponse, error) {
	out := new(TopologyResponse)
	err := c.cc.Invoke(ctx, "/sdn.SdnFrontend/GetTopology", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdnFrontendClient) GetSwitchDetails(ctx context.Context, in *SwitchNames, opts ...grpc.CallOption) (*SwitchDetailsResponse, error) {
	out := new(SwitchDetailsResponse)
	err := c.cc.Invoke(ctx, "/sdn.SdnFrontend/GetSwitchDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SdnFrontendServer is the server API for SdnFrontend service.
// All implementations must embed UnimplementedSdnFrontendServer
// for forward compatibility
type SdnFrontendServer interface {
	GetTopology(context.Context, *emptypb.Empty) (*TopologyResponse, error)
	GetSwitchDetails(context.Context, *SwitchNames) (*SwitchDetailsResponse, error)
	mustEmbedUnimplementedSdnFrontendServer()
}

// UnimplementedSdnFrontendServer must be embedded to have forward compatible implementations.
type UnimplementedSdnFrontendServer struct {
}

func (UnimplementedSdnFrontendServer) GetTopology(context.Context, *emptypb.Empty) (*TopologyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopology not implemented")
}
func (UnimplementedSdnFrontendServer) GetSwitchDetails(context.Context, *SwitchNames) (*SwitchDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwitchDetails not implemented")
}
func (UnimplementedSdnFrontendServer) mustEmbedUnimplementedSdnFrontendServer() {}

// UnsafeSdnFrontendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SdnFrontendServer will
// result in compilation errors.
type UnsafeSdnFrontendServer interface {
	mustEmbedUnimplementedSdnFrontendServer()
}

func RegisterSdnFrontendServer(s grpc.ServiceRegistrar, srv SdnFrontendServer) {
	s.RegisterService(&SdnFrontend_ServiceDesc, srv)
}

func _SdnFrontend_GetTopology_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdnFrontendServer).GetTopology(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.SdnFrontend/GetTopology",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdnFrontendServer).GetTopology(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdnFrontend_GetSwitchDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchNames)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdnFrontendServer).GetSwitchDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdn.SdnFrontend/GetSwitchDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdnFrontendServer).GetSwitchDetails(ctx, req.(*SwitchNames))
	}
	return interceptor(ctx, in, info, handler)
}

// SdnFrontend_ServiceDesc is the grpc.ServiceDesc for SdnFrontend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SdnFrontend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sdn.SdnFrontend",
	HandlerType: (*SdnFrontendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTopology",
			Handler:    _SdnFrontend_GetTopology_Handler,
		},
		{
			MethodName: "GetSwitchDetails",
			Handler:    _SdnFrontend_GetSwitchDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sdn/sdn.proto",
}
